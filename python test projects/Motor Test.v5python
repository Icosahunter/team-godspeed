{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nfrom math import *\n\n\n# Function Definitions\ndef DriveRobot():        \n    # Motor 1 Control\n    frontLeftMotorWeight = (2/3)*cos(controllerAngle + pi/3)\n    frontLeftMotor.set_velocity(100*abs(frontLeftMotorWeight), PERCENT)\n    SetMotorDirection(frontLeftMotorWeight, frontLeftMotor, deadzoneBuffer)\n\n    # Motor 2 Control\n    frontRightMotorWeight = (2/3)*cos(controllerAngle + 5*pi/3)\n    frontRightMotor.set_velocity(100*abs(frontRightMotorWeight), PERCENT)\n    SetMotorDirection(frontRightMotorWeight, frontRightMotor, deadzoneBuffer)\n\n    # Motor 3 Control\n    backMotorWeight = (2/3)*cos(controllerAngle + pi)\n    backMotor.set_velocity(100*abs(backMotorWeight), PERCENT)\n    SetMotorDirection(backMotorWeight, backMotor, deadzoneBuffer)\n\n# To control each motor individually\ndef SetMotorDirection(motorWeight, motorName, deadzoneBuffer):\n    if (motorWeight > deadzoneBuffer):\n        motorName.spin(FORWARD)\n\n    elif(motorWeight < deadzoneBuffer):\n        motorName.spin(REVERSE)\n\n    else:\n        motorName.stop()\n\n# For halting the robot where necessary\ndef StopAllMotors():\n    frontLeftMotor.stop()\n    frontRightMotor.stop()\n    backMotor.stop()\ndeadzoneBuffer = 0 # Determine how much the joystick needs to be away from the center before the robot registers the movement\nwhile(True):\n\n    # Recalculate the joystick angle each time through the loop\n    controllerAngle = atan2(controller_1.axis3.position(), controller_1.axis4.position()) # Calculate the angle of the joystick from the +x axis\n    # Show the angle of the joystick even when the robot is in \"Failsafe mode\"\n    controller_1.screen.clear_screen() # To show info that we're interested in instead of the default\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Angle = \" + str(controllerAngle))\n    controller_1.screen.set_cursor(2, 1)\n    controller_1.screen.print(\"x = \" + str(controller_1.axis4.position()))\n    controller_1.screen.set_cursor(3, 1)\n    controller_1.screen.print(\"y = \" + str(controller_1.axis3.position()))\n\n    # Failsafe. Only allow the motors to move if L1 is pressed.\n    if (controller_1.buttonL1.pressing()):\n        DriveRobot()\n\n    # Failsafe. Stop the motors if L1 is not being pressed\n    else:\n        StopAllMotors()\n\n\n","textLanguage":"python","rconfig":[{"port":[10],"name":"frontLeftMotor","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"frontRightMotor","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"backMotor","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}