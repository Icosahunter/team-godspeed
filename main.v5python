{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import Thread, brain.*, math.*\n\n# Begin project code\n\nclass ActiveObject():\n\n    def __init__(self):\n        self.thread = None\n        self.update = None\n        self.__is_running = False\n    \n    @property\n    def is_running(self):\n        return self.__is_running\n\n    def start(self):\n        self.thread = Thread(lambda () : self.__update())\n        self.__is_running = True\n    \n    def stop(self):\n        self.thread.interrupt()\n        self.__is_running = False\n\n    def __update(self):\n        self.update()\n        self.__is_running = False\n\n\nclass InputController(ActiveObject):\n\n    def __init__(self):\n        self.inputs = {}\n\n    def update(self):\n        for i in self.inputs:\n            i.update()\n\n\nclass Input():\n    \n    def __init__(self, fetch_value_function):\n        self.value_changed = Event()\n        self.value = None\n        self.fetch_value = fetch_value_function\n    \n    def update(self):\n        new_val = self.fetch_value()\n        if new_val != self.value:\n            self.value_changed.raise()\n            self.value = new_val\n\n\nclass Event(List):\n\n    def raise(self, *args, **kwargs):\n        for callback in self:\n            callback(*args, **kwargs)\n\n\nclass Condition():\n    \n    def __init__(self, conditional_statement):\n        self.value = None\n        self.value_changed = Event()\n        self.condition = conditional_statement\n        self.__update_func = lambda () : self.update\n\n    def watch_inputs(self, input_names*):\n        for input_name in input_names:\n            input_controller.inputs[input_name] += self.__update_func\n\n    def unwatch_inputs(self, input_names*):\n        for input_name in input_names:\n            input_controller.inputs[input_name] -= self.__update_func\n\n    def update(self):\n        new_val = self.condition()\n        if new_val != self.value:\n            self.value_changed.raise()\n            self.value = new_val\n\n\nclass BehaviorModule(ActiveObject):\n\n    def __init__(self, condition, behavior, subsumed* = []):\n        self.condition = condition\n        self.behavior = behavior\n        self.subsumed = []\n        for s in subsumed:\n            self.subsumed += s\n        self.__is_subsumed = False\n        self.condition.value_changed += lambda ():self.__condition_value_changed_handler()\n\n    @property\n    def is_subsumed():\n        return self.__is_subsumed\n\n    def update(self):\n        self.behavior()\n        for s in subsumed:\n            s.free()\n\n    def __condition_value_changed_handler(self):\n        if self.condition.value and not self.is_subsumed:\n            __activate()\n\n    def subsume():\n        self.stop()\n        self.__is_subsumed = True\n\n    def free():\n        self.__is_subsumed = False\n\n    def __activate():\n        for s in subsumed:\n            s.subsume()\n        self.start()\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}