[1mdiff --git a/include/inputs/path-script.h b/include/inputs/path-script.h[m
[1mindex d15d72a..58526d7 100644[m
[1m--- a/include/inputs/path-script.h[m
[1m+++ b/include/inputs/path-script.h[m
[36m@@ -79,12 +79,11 @@[m [mnamespace godspeed[m
             if (pathIndex != currentPath->path.end())[m
             {[m
               updateVars();[m
[31m-              pathIndex++;[m
               timer::event(update, durVal());[m
[32m+[m[32m              pathIndex++;[m
             }[m
             else[m
             {[m
[31m-              updateVars();[m
               if (currentPath->loop)[m
               {[m
                 pathIndex = currentPath->path.begin();[m
[1mdiff --git a/include/outputs/ball-scorer.h b/include/outputs/ball-scorer.h[m
[1mindex 106ad70..82a93e3 100644[m
[1m--- a/include/outputs/ball-scorer.h[m
[1m+++ b/include/outputs/ball-scorer.h[m
[36m@@ -20,7 +20,7 @@[m [mnamespace godspeed[m
       /// \brief Sets the speed of the center tread[m
       void TreadSpeed(double speed)[m
       {[m
[31m-        setMotorSpeed(speed, ScorerMotor);[m
[32m+[m[32m        setMotorSpeed(-speed, ScorerMotor);[m
       }[m
 [m
       void SpinLeftExpander()[m
[1mdiff --git a/include/outputs/omni-drive-3-wheel.h b/include/outputs/omni-drive-3-wheel.h[m
[1mindex 1c6781b..0e9a54c 100644[m
[1m--- a/include/outputs/omni-drive-3-wheel.h[m
[1m+++ b/include/outputs/omni-drive-3-wheel.h[m
[36m@@ -20,6 +20,18 @@[m [mnamespace godspeed[m
       /// \brief A variable to track the current desired angular speed[m
       double AngleSpeedVar;[m
 [m
[32m+[m[32m      void PrintToScreen(){[m
[32m+[m[32m        // Print the X and Y coordinates of the controller's left joystick on the first line of the VEX Brain's screen[m
[32m+[m[32m        Controller1.Screen.clearScreen();[m
[32m+[m[32m        Controller1.Screen.setCursor(1, 1);[m
[32m+[m[32m        Controller1.Screen.print(XSpeedVar);[m
[32m+[m[32m        Controller1.Screen.newLine();[m
[32m+[m[32m        Controller1.Screen.print(YSpeedVar);[m
[32m+[m[32m        Controller1.Screen.newLine();[m
[32m+[m[32m        Controller1.Screen.print(AngleSpeedVar);[m
[32m+[m[32m        Controller1.Screen.newLine();[m
[32m+[m
[32m+[m[32m      }[m
       /// \brief Set the X, Y, and angular velocities of the drivetrain[m
       void SetVelocity(double x, double y, double a)[m
       {[m
[36m@@ -41,14 +53,14 @@[m [mnamespace godspeed[m
         double m3spd = mag*0.666*cos(ang + M_PI) + angVel; [m
 [m
         // Print the X and Y coordinates of the controller's left joystick on the first line of the VEX Brain's screen[m
[31m-        //Brain.Screen.clearScreen();[m
[31m-        //Brain.Screen.setCursor(1, 1);[m
[31m-        //Brain.Screen.print(x);[m
[31m-        //Brain.Screen.newLine();[m
[31m-        //Brain.Screen.print(y);[m
[31m-        //Brain.Screen.newLine();[m
[31m-        //Brain.Screen.print(angVel);[m
[31m-        //Brain.Screen.newLine();[m
[32m+[m[32m//        Controller1.Screen.clearScreen();[m
[32m+[m[32m//        Controller1.Screen.setCursor(1, 1);[m
[32m+[m[32m//        Controller1.Screen.print(x);[m
[32m+[m[32m//        Controller1.Screen.newLine();[m
[32m+[m[32m//        Controller1.Screen.print(y);[m
[32m+[m[32m//        Controller1.Screen.newLine();[m
[32m+[m[32m//        Controller1.Screen.print(angVel);[m
[32m+[m[32m//        Controller1.Screen.newLine();[m
 [m
         // Set the speed and direction of the motors so that when we turn them on, the robot moves in the desired direction (the direction the joystick is pointing)[m
 [m
[1mdiff --git a/include/outputs/output-utilities.h b/include/outputs/output-utilities.h[m
[1mindex 97d575b..e1bfcbb 100644[m
[1m--- a/include/outputs/output-utilities.h[m
[1m+++ b/include/outputs/output-utilities.h[m
[36m@@ -16,7 +16,7 @@[m [mnamespace godspeed[m
         * which it treats as equal to zero (no movement)[m
         */[m
       void setMotorSpeed(double motorSpeed, motor &m)[m
[31m-      {[m
[32m+[m[32m      {[m[41m        [m
         // if motor speed is out of bounds, set to nearest boundary value[m
         if (std::abs(motorSpeed) > 1)[m
         {[m
[1mdiff --git a/src/main.cpp b/src/main.cpp[m
[1mindex 7d92690..606d2fc 100644[m
[1m--- a/src/main.cpp[m
[1m+++ b/src/main.cpp[m
[36m@@ -47,28 +47,87 @@[m [mint main() {[m
   Binder::Init();       //Binder initialization[m
   BallStorage::Init();  //Ball storage suite initialization[m
 [m
[31m-  BindPathScript();  //Setup bindings[m
[32m+[m[32m  BindPathScript();  //Setup Path Script bindings[m
[32m+[m[32m//  BindDriverControl(); //Setup Driver Control bindings[m
 [m
   this_thread::yield();[m
 }[m
 [m
[31m-void StartPath()[m
[32m+[m[32mdouble v = 1.0; // motor power (1.0 = 100% power)[m
[32m+[m[32mdouble t = 3000; // Time to move in that direction (ms)[m
[32m+[m
[32m+[m[32mvoid StartPath1()[m
 {[m
   PathScript script = PathScript();[m
[31m-  script.AddCommand( 0.5,  0.0, 0, 2000);[m
[31m-  script.AddCommand( 0.0,  0.5, 0, 2000);[m
[31m-  script.AddCommand(-0.5,  0.0, 0, 2000);[m
[31m-  script.AddCommand( 0.0, -0.5, 0, 2000);[m
[31m-  script.AddCommand( 0.0,  0.0, 0, 2000);[m
[32m+[m[32m/*[m[41m  [m
[32m+[m[32m  // Drivetrain Experiment Script 1[m
[32m+[m[32m  script.AddCommand(0, v, 0, t); // move forward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, v, 0, t); // move forward-left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand( v, 0, 0, t); // move right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, -v, 0, t); // move backward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(v, v, 0, t); // move forward-right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, -v, 0, t); // move backward-left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(v, -v, 0, t); // move backward-right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, 0, 0, t); // move left at v% speed for t ms[m
[32m+[m[32m*/[m
[32m+[m[32m  script.AddCommand(0, v, 0, t); // move forward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, 0, 0, t); // move left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, -v, 0, t); // move backward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand( v, 0, 0, t); // move right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t); // stop moving[m
   PathScript::ExecutePath(script);[m
 }[m
 [m
[32m+[m[32mvoid StartPath2()[m
[32m+[m[32m{[m
[32m+[m[32m  PathScript script = PathScript();[m
[32m+[m[32m/*[m
[32m+[m[32m  // Drivetrain Experiment Script 2[m
[32m+[m[32m  script.AddCommand( v, 0, 0, t); // move right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, v, 0, t); // move forward-left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(v, v, 0, t); // move forward-right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, -v, 0, t); // move backward-left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, v, 0, t); // move forward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(-v, 0, 0, t); // move left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(v, -v, 0, t); // move backward-right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, -v, 0, t); // move backward at v% speed for t ms[m
[32m+[m[32m*/[m
[32m+[m[32m  script.AddCommand(-v, 0, 0, t); // move left at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, v, 0, t); // move forward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand( v, 0, 0, t); // move right at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, -v, 0, t); // move backward at v% speed for t ms[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t/4.0); // stop moving[m
[32m+[m[32m  script.AddCommand(0, 0, 0, t); // stop moving[m
[32m+[m[32m  PathScript::ExecutePath(script);[m
[32m+[m[32m}[m
 void BindPathScript()[m
 {[m
   Binder::Bind(PathScript::X, OmniDrive3Wheel::XSpeed);         //Bind the path script x-speed to drivetrains x-speed[m
   Binder::Bind(PathScript::Y, OmniDrive3Wheel::YSpeed);         //Bind the path script y-speed to drivetrains y-speed[m
   Binder::Bind(PathScript::Angle, OmniDrive3Wheel::AngleSpeed); //Bind the path script angle speed to drivetrains angle speed[m
[31m-  Controller1.ButtonA.pressed(StartPath);                       //Subscribe start path to the controller's A button being pressed[m
[32m+[m[32m  Controller1.ButtonA.pressed(StartPath1);                       //Subscribe start path to the controller's A button being pressed[m
[32m+[m[32m  Controller1.ButtonB.pressed(StartPath2);                       //Subscribe start path to the controller's A button being pressed[m
 }[m
 [m
 void BindDriverControl()[m
[36m@@ -80,9 +139,10 @@[m [mvoid BindDriverControl()[m
   Binder::Bind(RemoteController::LeftTrigger, BallScorer::TreadSpeed);      //Bind the left trigger to the center tread[m
   Binder::Bind(RemoteController::RightTrigger, BallCollector::TreadSpeed);  //Bind the right trigger to collector treads[m
 [m
[31m-  Binder::Bind(RemoteController::UpButton, OmniDrive3Wheel::Forward);       //Bind the up button to moving forward[m
[31m-  Binder::Bind(RemoteController::DownButton, OmniDrive3Wheel::Backward);    //Bind the down button to moving backward[m
[31m-  Binder::Bind(RemoteController::RightButton, OmniDrive3Wheel::Right);      //Bind the right button to moving right[m
[31m-  Binder::Bind(RemoteController::LeftButton, OmniDrive3Wheel::Left);        //Bind the left button to moving left[m
[31m-  //BallScorer::ExpanderPosition(360);[m
[32m+[m
[32m+[m[32m//  Binder::Bind(RemoteController::UpButton, OmniDrive3Wheel::Forward);       //Bind the up button to moving forward[m
[32m+[m[32m//  Binder::Bind(RemoteController::DownButton, OmniDrive3Wheel::Backward);    //Bind the down button to moving backward[m
[32m+[m[32m//  Binder::Bind(RemoteController::RightButton, OmniDrive3Wheel::Right);      //Bind the right button to moving right[m
[32m+[m[32m//  Binder::Bind(RemoteController::LeftButton, OmniDrive3Wheel::Left);        //Bind the left button to moving left[m
[32m+[m[32m  BallScorer::ExpanderPosition(0);//365);[m
 }[m
\ No newline at end of file[m
